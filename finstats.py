"""

Purpose: The Purpose of this script is to take in data generated by a bank checking account and manipulating the data
to depict a clear view of monthly income, monthly expenses and monthly savings.  The result of this script would
allow me to more easily determine my average saving rate per month, where my spending is concentrated, and enable
budget planning.

Version: 0.1
Description:  Functionality currently enables clear display of net income, expenses and savings.
Author: Ryan Pepito

"""




import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#Crude Method
dictIncome={
    1:0,
    2:0,
    3:0,
    4:0,
    5:0,
    6:0,
    7:0,
    8:0,
    9:0,
    10:0,
    11:0,
    12:0
}
dictExp={
    1:0,
    2:0,
    3:0,
    4:0,
    5:0,
    6:0,
    7:0,
    8:0,
    9:0,
    10:0,
    11:0,
    12:0
}
dictPay={
    1:0,
    2:0,
    3:0,
    4:0,
    5:0,
    6:0,
    7:0,
    8:0,
    9:0,
    10:0,
    11:0,
    12:0
}
#df2 = pd.DataFrame(
rows = ['Net Income','Expenses','Take Home Pay']
numset = [1,2,3,4,5,6,7,8,9,10,11,12]
months = ['January','February','March','April','May','June','July','August','September', 'October', 'November', 'December']
#print("Hello World!")
if __name__ == "__main__":
    data = pd.read_csv("2018CheckingData.csv")
    data.columns = ['Date', 'Amount', 'Star', 'Check #', 'Description']
    data = data.drop('Star', 1)
    data.Date = pd.to_datetime(data.Date)
    data = data.sort_values(by=['Date'])

    data = data.reset_index(drop=True)
    print data
#   print data.columns
#    for key, value in dictIncome.iteritems():
    for index, row in data.iterrows():
        for x in range(1, 13):
            if row["Date"].month == x:
                if row["Amount"] > 0:
                    dictIncome[x] = dictIncome[x] + row["Amount"]
                elif row["Amount"] < 0:
                    dictExp[x] = dictExp[x] + row["Amount"]

    for y in range(1,13):
        dictPay[y] = round(dictIncome[y] + dictExp[y],2)
#          elif row["Amount"] < 0:
    finalDF = pd.DataFrame(index=rows,columns=numset)
    finalDF.loc['Net Income'] = pd.Series(dictIncome)
    finalDF.loc['Expenses'] = pd.Series(dictExp)
    finalDF.loc['Take Home Pay'] = pd.Series(dictPay)
    print finalDF
    print finalDF.columns
    finalDF.columns = months
    print finalDF
    print finalDF.columns
    print dictIncome
    print dictExp
    print dictPay